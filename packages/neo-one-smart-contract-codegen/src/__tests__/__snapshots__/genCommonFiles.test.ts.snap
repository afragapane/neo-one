// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`genCommonFiles Token 1`] = `
Object {
  "client": "// tslint:disable
import {
  Client,
  LocalKeyStore,
  LocalMemoryStore,
  LocalUserAccountProvider,
  NEOONEProvider,
  UserAccountProvider,
} from '@neo-one/client';

type DefaultUserAccountProviders = {
  readonly memory: LocalUserAccountProvider<LocalKeyStore, NEOONEProvider>;
};
const getDefaultUserAccountProviders = (provider: NEOONEProvider): DefaultUserAccountProviders => ({
  memory: new LocalUserAccountProvider({
    keystore: new LocalKeyStore({ store: new LocalMemoryStore() }),
    provider,
  }),
});

const isLocalUserAccountProvider = (
  userAccountProvider: UserAccountProvider,
): userAccountProvider is LocalUserAccountProvider<any, any> => userAccountProvider instanceof LocalUserAccountProvider;

export const createClient = <
  TUserAccountProviders extends { readonly [K: string]: UserAccountProvider } = DefaultUserAccountProviders
>(
  getUserAccountProviders: (provider: NEOONEProvider) => TUserAccountProviders = getDefaultUserAccountProviders as any,
): Client<TUserAccountProviders> => {
  const provider = new NEOONEProvider([{ network: 'local', rpcURL: 'http://localhost:4500/rpc' }]);
  const userAccountProviders = getUserAccountProviders(provider);

  const localUserAccountProviders = Object.values(userAccountProviders).filter(isLocalUserAccountProvider);
  const localUserAccountProvider = localUserAccountProviders.find(
    (userAccountProvider) => userAccountProvider.keystore instanceof LocalKeyStore,
  );
  if (localUserAccountProvider !== undefined) {
    const localKeyStore = localUserAccountProvider.keystore;
    if (localKeyStore instanceof LocalKeyStore) {
      localKeyStore
        .addAccount({
          network: 'local',
          name: 'master',
          privateKey: 'L4qhHtwbiAMu1nrSmsTP5a3dJbxA3SNS6oheKnKd8E7KTJyCLcUv',
        })
        .catch(() => {
          // do nothing
        });
    }
  }

  return new Client(userAccountProviders);
};
",
  "commonTypes": "// tslint:disable
import { ICOSmartContract } from './ICO/types';
import { TokenSmartContract } from './Token/types';

export interface Contracts {
  readonly ico: ICOSmartContract;
  readonly token: TokenSmartContract;
}
",
  "generated": "// tslint:disable
export * from './types';
export * from './react';
export * from './client';
export * from './Token/contract';
export * from './Token/types';
export * from './Token/abi';
export * from './ICO/contract';
export * from './ICO/types';
export * from './ICO/abi';
",
  "react": "// tslint:disable
import { Client } from '@neo-one/client';
import * as React from 'react';
import { Contracts } from './types';
import { createClient } from './client';
import { createTokenSmartContract } from './Token/contract';
import { createICOSmartContract } from './ICO/contract';

export interface WithClient<TClient extends Client> {
  readonly client: TClient;
}
export type ContractsWithClient<TClient extends Client> = Contracts & WithClient<TClient>;
const Context: any = React.createContext<ContractsWithClient<Client>>(undefined as any);

export interface ContractsProviderProps<TClient extends Client> {
  readonly client?: TClient;
  readonly children?: React.ReactNode;
}
export const ContractsProvider = <TClient extends Client>({
  client: clientIn,
  children,
}: ContractsProviderProps<TClient>) => {
  const client = clientIn === undefined ? createClient() : clientIn;

  return (
    <Context.Provider
      value={{
        client,
        token: createTokenSmartContract(client),
        ico: createICOSmartContract(client),
      }}
    >
      {children}
    </Context.Provider>
  );
};

export interface WithContractsProps<TClient extends Client> {
  readonly children: (contracts: ContractsWithClient<TClient>) => React.ReactNode;
}
export const WithContracts = <TClient extends Client>({ children }: WithContractsProps<TClient>) => (
  <Context.Consumer>{children}</Context.Consumer>
);
",
  "sourceMaps": "// tslint:disable
import { SourceMaps } from '@neo-one/client';

let sourceMapsIn: SourceMaps = {};

if (process.env.NODE_ENV !== 'production') {
  const token: any = {
    file: 'file',
    mappings: 'sourcemap',
    names: [],
    sources: [],
    version: 0,
  };
  const ico: any = {
    file: 'file',
    mappings: 'sourcemap',
    names: [],
    sources: [],
    version: 0,
  };
  sourceMapsIn = {
    AV6PhAq1FHBeCMsNUPMWzpUFxvXRFwHoLn: token,
    ATfAohZQ5iuGDXWjcHxLAj8WXwQchGLXhi: ico,
  };
}

export const sourceMaps = sourceMapsIn;
",
  "test": "// tslint:disable
import { TestOptions, withContracts as withContractsBase, WithContractsOptions } from '@neo-one/smart-contract-test';
import * as path from 'path';
import { Contracts } from './types';

export const withContracts = async (
  test: (contracts: Contracts & TestOptions) => Promise<void>,
  options?: WithContractsOptions,
): Promise<void> =>
  withContractsBase<Contracts>(
    [
      { name: 'Token', filePath: path.resolve(__dirname, '../contracts/Token.ts') },
      { name: 'ICO', filePath: path.resolve(__dirname, '../contracts/ICO.ts') },
    ],
    test,
    options,
  );
",
}
`;
