// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`genSmartContractTypes NEP5 1`] = `
Object {
  "ts": "import { AddressString, Event, GetOptions, InvocationTransaction, InvokeReceipt, ReadSmartContract, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';

export type TokenEvent = TokenTransferEvent

export interface TokenTransferEventParameters {
  readonly from: AddressString | undefined;
  readonly to: AddressString | undefined;
  readonly amount: BigNumber;
}
export interface TokenTransferEvent extends Event<'transfer', TokenTransferEventParameters> {}

export interface TokenSmartContract extends SmartContract<TokenReadSmartContract> {
  readonly balanceOf: (account: AddressString) => Promise<BigNumber>;
  readonly decimals: () => Promise<BigNumber>;
  readonly name: () => Promise<string>;
  readonly symbol: () => Promise<string>;
  readonly totalSupply: () => Promise<BigNumber>;
  readonly transfer: {
  (from: AddressString, to: AddressString, value: BigNumber, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean, TokenEvent>, InvocationTransaction>>;
  readonly confirmed: (from: AddressString, to: AddressString, value: BigNumber, options?: TransactionOptions& GetOptions) => Promise<InvokeReceipt<boolean, TokenEvent> & { readonly transaction: InvocationTransaction}>;
}
}

export interface TokenReadSmartContract extends ReadSmartContract<TokenEvent> {
  readonly balanceOf: (account: AddressString) => Promise<BigNumber>;
  readonly decimals: () => Promise<BigNumber>;
  readonly name: () => Promise<string>;
  readonly symbol: () => Promise<string>;
  readonly totalSupply: () => Promise<BigNumber>;
}
",
}
`;
