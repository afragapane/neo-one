// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`genSmartContractTypes NEP5 1`] = `
Object {
  "ts": "import { AddressString, ContractParameter, Event, ForwardValue, GetOptions, InvocationTransaction, InvokeReceipt, ReadSmartContract, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';


export interface TokenTransferEventParameters {
  readonly from: AddressString | undefined;
  readonly to: AddressString | undefined;
  readonly amount: BigNumber;
}
export interface TokenTransferEvent extends Event<'transfer', TokenTransferEventParameters> {}
export type TokenEvent = TokenTransferEvent

export interface TokenSmartContract extends SmartContract<TokenReadSmartContract> {
  readonly balanceOf: (account: AddressString) => Promise<BigNumber>;
  readonly decimals: () => Promise<BigNumber>;
  readonly forward: {
  (address: AddressString, options?: TransactionOptions, ...args: ForwardValue[]): Promise<TransactionResult<InvokeReceipt<ContractParameter, TokenEvent>, InvocationTransaction>>;  
(address: AddressString, ...args: ForwardValue[]): Promise<TransactionResult<InvokeReceipt<ContractParameter, TokenEvent>, InvocationTransaction>>;
  readonly confirmed: {
    (address: AddressString, options?: TransactionOptions& GetOptions, ...args: ForwardValue[]): Promise<InvokeReceipt<ContractParameter, TokenEvent> & { readonly transaction: InvocationTransaction}>;    
(address: AddressString, ...args: ForwardValue[]): Promise<InvokeReceipt<ContractParameter, TokenEvent> & { readonly transaction: InvocationTransaction}>;
  },
}
  readonly forwardConstant: (address: AddressString, ...args: ForwardValue[]) => Promise<ContractParameter>;
  readonly forwardTo: {
  (first: BigNumber, second: BigNumber, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<BigNumber, TokenEvent>, InvocationTransaction>>;
  readonly confirmed: {
    (first: BigNumber, second: BigNumber, options?: TransactionOptions& GetOptions): Promise<InvokeReceipt<BigNumber, TokenEvent> & { readonly transaction: InvocationTransaction}>;
  },
}
  readonly forwardForwardToArgs: (first: BigNumber, second: BigNumber) => [ForwardValue, ForwardValue]
  readonly forwardForwardToReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<BigNumber, E> : never;
  (result: ContractParameter): BigNumber
}
  readonly forwardToConstant: (first: BigNumber, second: BigNumber) => Promise<BigNumber>;
  readonly forwardForwardToConstantArgs: (first: BigNumber, second: BigNumber) => [ForwardValue, ForwardValue]
  readonly forwardForwardToConstantReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<BigNumber, E> : never;
  (result: ContractParameter): BigNumber
}
  readonly name: () => Promise<string>;
  readonly symbol: () => Promise<string>;
  readonly totalSupply: () => Promise<BigNumber>;
  readonly transfer: {
  (from: AddressString, to: AddressString, value: BigNumber, options?: TransactionOptions, ...args: ForwardValue[]): Promise<TransactionResult<InvokeReceipt<boolean, TokenEvent>, InvocationTransaction>>;  
(from: AddressString, to: AddressString, value: BigNumber, ...args: ForwardValue[]): Promise<TransactionResult<InvokeReceipt<boolean, TokenEvent>, InvocationTransaction>>;
  readonly confirmed: {
    (from: AddressString, to: AddressString, value: BigNumber, options?: TransactionOptions& GetOptions, ...args: ForwardValue[]): Promise<InvokeReceipt<boolean, TokenEvent> & { readonly transaction: InvocationTransaction}>;    
(from: AddressString, to: AddressString, value: BigNumber, ...args: ForwardValue[]): Promise<InvokeReceipt<boolean, TokenEvent> & { readonly transaction: InvocationTransaction}>;
  },
}
}

export interface TokenReadSmartContract extends ReadSmartContract<TokenEvent> {
  readonly balanceOf: (account: AddressString) => Promise<BigNumber>;
  readonly decimals: () => Promise<BigNumber>;
  readonly forwardConstant: (address: AddressString, ...args: ForwardValue[]) => Promise<ContractParameter>;
  readonly forwardToConstant: (first: BigNumber, second: BigNumber) => Promise<BigNumber>;
  readonly name: () => Promise<string>;
  readonly symbol: () => Promise<string>;
  readonly totalSupply: () => Promise<BigNumber>;
}
",
}
`;
