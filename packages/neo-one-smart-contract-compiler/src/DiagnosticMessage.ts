export enum DiagnosticMessage {
  GenericUnsupportedSyntax = 'Unsupported syntax.',
  CouldNotInferType = 'Could not infer type. Please add an explicit type annotation.',
  CouldNotInferTypeDeopt = 'Could not infer type. Deoptimized implementation will be used. Add an explicit type annotation ',
  CouldNotInferSymbol = 'Could not infer symbol.',
  CouldNotInferSymbolDeopt = 'Could not infer symbol. Deoptimized implementation will be used.',
  CannotImplementBuiltin = 'Built-ins cannot be implemented.',
  CannotReferenceBuiltinProperty = 'Builtin properties cannot be referenced',
  CannotModifyBuiltin = 'Builtins cannot be modified',
  CannotIndexBuiltin = 'Builtin properties cannot be referenced',
  CannotReferenceBuiltin = 'Builtins cannot be referenced',
  CannotInstanceofBuiltin = 'Builtins cannot be checked with instanceof',
  InvalidSyscall = 'First argument to syscall must be a string literal corresponding to a NEO syscall.',
  DeployReserved = 'The deploy method is reserved in SmartContract instances.',
  InvalidContractEventNameStringLiteral = 'Invalid SmartContract event. Event name must be a string literal.',
  InvalidContractEventMissingType = 'Invalid SmartContract event. Argument type must be explicitly defined.',
  InvalidContractEventArgStringLiteral = 'Invalid SmartContract event. Argument must be a string literal.',
  InvalidContractEventDeclaration = 'Invalid SmartContract event. Event must be assigned to a variable.',
  InvalidContractPropertiesMissing = 'Invalid SmartContract. Properties must be defined.',
  InvalidContractPropertiesInitializer = 'Invalid SmartContract. Properties must be defined with an object literal of literal properties.',
  InvalidContractMethodMultipleSignatures = 'Invalid SmartContract method. Method must have one call signature',
  SyscallReturnTypeExplicitCast = 'Syscall return type must be explicitly casted to expected type.',
  UnknownReference = 'Unknown reference %s',
}
