import { Context } from '../../Context';
import { add as addArguments } from './arguments';
import { add as addArray } from './array';
import { add as addAssertEqual } from './assertEqual';
import { add as addBoolean } from './boolean';
import { add as addBuffer } from './buffer';
import { Builtins } from './Builtins';
import { add as addConsole } from './console';
import { add as addError } from './error';
import { add as addFunction } from './function';
import { add as addIterable } from './iterable';
import { add as addIterableIterator } from './iterableIterator';
import { add as addIterator } from './iterator';
import { add as addIteratorResult } from './iteratorResult';
import { add as addMap } from './map';
import { add as addNumber } from './number';
import { add as addObject } from './object';
import { add as addPropertyDescriptor } from './propertyDescriptor';
import { add as addRegExp } from './regexp';
import { add as addString } from './string';
import { add as addSymbol } from './symbol';
import { add as addTemplateStringsArray } from './templateStringsArray';
import { add as addTypedPropertyDescriptor } from './typedPropertyDescriptor';

export const createBuiltins = (context: Context): Builtins => {
  const builtins = new Builtins();
  addArguments(context, builtins);
  addArray(context, builtins);
  addAssertEqual(context, builtins);
  addBoolean(context, builtins);
  addBuffer(context, builtins);
  addConsole(context, builtins);
  addError(context, builtins);
  addFunction(context, builtins);
  addIterable(context, builtins);
  addIterableIterator(context, builtins);
  addIterator(context, builtins);
  addIteratorResult(context, builtins);
  addMap(context, builtins);
  addNumber(context, builtins);
  addObject(context, builtins);
  addPropertyDescriptor(context, builtins);
  addRegExp(context, builtins);
  addString(context, builtins);
  addSymbol(context, builtins);
  addTemplateStringsArray(context, builtins);
  addTypedPropertyDescriptor(context, builtins);

  return builtins;
};
