#! /usr/bin/env node
/* @flow */
import '@babel/polyfill';
import {
  STATIC_NEO_ONE_OPTION,
  DIR_OPTION,
  SERVER_PORT_OPTION,
  MIN_PORT_OPTION,
  InteractiveCLI,
  CLI,
} from '../';

let { argv } = process;
const debugIdx = argv.indexOf('--debug');
const debug = debugIdx !== -1
if (debug) {
  argv = argv.slice(0, debugIdx).concat(argv.slice(debugIdx + 1));
}

const staticIdx = argv.indexOf(STATIC_NEO_ONE_OPTION);
const isStatic = staticIdx !== -1;
if (isStatic) {
  argv = argv.slice(0, staticIdx).concat(argv.slice(staticIdx + 1));
}

const quoteArgs = (args: Array<string>): Array<string> =>
  args.map((arg, idx) => {
    if (idx === 0) {
      return arg;
    }

    if (arg.includes(' ')) {
      return `"${arg}"`;
    }

    return arg;
  });

const extractOption = (
  argsIn: Array<string>,
  option: string,
): [Array<string>, ?string] => {
  let args = argsIn;
  const index = args.indexOf(option);
  let value;
  if (index !== -1) {
    value = args[index + 1];
    args = args.slice(0, index).concat(args.slice(index + 2));
  }

  return [args, value];
};

let result = extractOption(argv, DIR_OPTION);
([argv] = result);
const dir = result[1];

result = extractOption(argv, SERVER_PORT_OPTION);
([argv] = result);
const serverPort = result[1] == null ? undefined : parseInt(result[1], 10);


result = extractOption(argv, MIN_PORT_OPTION);
([argv] = result);
const minPort = result[1] == null ? undefined : parseInt(result[1], 10);

if (isStatic) {
  new CLI({
    debug,
    dir,
    serverPort,
    minPort,
  }).start(quoteArgs(argv));
} else {
  new InteractiveCLI({
    debug,
    dir,
    serverPort,
    minPort,
  }).start(quoteArgs(argv));
}
